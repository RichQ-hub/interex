services:
  backend:
    build: ./backend
    ports:
      - "5555:4000" # mapping the external port 5555 to container's internal port 4000 (on your computer use localhost:5555)
    volumes:
      # Bind mount. This means when we make changes in ./backend on the host, it syncs the changes in the
      # container ./app (./app is the same as the WORKDIR in the Dockerfile).
      - ./backend:/app
      - /app/node_modules # Explained below.
    depends_on:
      - db
    develop:
      watch:
        - action: sync
          path: ./backend
          target: /app
          ignore:
            - ./backend/node_modules/

  # frontend:
  #   build: ./frontend
  #   ports:
  #     - "3333:3000" # mapping the external port 3333 to container's internal port 3000 (on your computer use localhost:3333)
  #   volumes: # every time you make a change, this will reload the changes in the container
  #     - ./frontend:/usr/src/app # write these as ./<path to folder>:/<path to folder in container>
  #     - /usr/src/app/node_modules
  #   environment:
  #     - BACKEND_URL=http://localhost:5555 # this defines the URL the frontend makes requests to
  #   develop:
  #     watch:
  #       - action: sync
  #         path: ./frontend
  #         target: /usr/src/app
  #         ignore:
  #           - ./frontend/node_modules/
    
  db:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment: # For these env variables to be available (${VARIABLE}), the .env file must be in the SAME folder as docker-compose.yml.
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
    volumes:
      # Persist database data.
      - data:/var/lib/postgresql/data
      # Copy the sql script to create tables. The first time the service starts, sql files inside
      # the /docker-entrypoint-initb.d folder will be imported and executed.
      - ./backend/src/db/schema.sql:/docker-entrypoint-initdb.d/schema.sql

  db_test:
    image: postgres:16-alpine
    ports:
      - "7777:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
    profiles: [test]
    volumes:
      - ./backend/src/db/schema.sql:/docker-entrypoint-initdb.d/schema.sql

volumes:
  data:

# -------------------------------------------------------------------------------------------------------------------

# PURPOSE OF MOUNTING NODE_MODULES AS A VOLUME:

# By default, when you mount a host directory (like ./backend) into a Docker container, the contents of
# that directory on the host will override the corresponding directory in the container (./app). This can be
# a problem if you bind-mount the entire project root, because the node_modules folder installed inside
# the container (during the build process) could get replaced by whatever is on the host â€” often, the host
# might not even have a node_modules folder or it might have an incompatible one.
# 
# Mapping the node_modules directory specifically as a named volume (or leaving it unmounted, which is the
# case above) allows the container to manage node_modules independently of the host system once it is
# installed via the Dockerfile. This ensures the integrity of the dependencies inside the container.

# Resource: https://medium.com/@sudiptob2/properly-setting-up-react-development-environment-using-docker-a2de46464d0b

# -------------------------------------------------------------------------------------------------------------------

# DIFFERENCE BETWEEN WATCH AND BIND-MOUNT:

# Bind mounts only sync files between host and container. Watch rebuilds the container whenever a change is made on
# the host. Say you installed a new package on the host which updates package.json. Then bind mount will only
# update the package.json with the new dependency without rebuilding the container, so the container essentially DOESN'T
# install the dependency. Watch rebuilds the container so that it runs `yarn install` so it should contain
# the dependency.

# -------------------------------------------------------------------------------------------------------------------